#import "conf.typ": lab_report
#show: lab_report.with(
  num: 8,
  subject: "Безпека програм та даних",
  title: "Підсистема реєстрації",
  authors: ("Неголюк О.О.", "Ратушняк М.А."),
  reviewer: "Остапов С.Е.",
  year: 2025,
)

= МЕТА РОБОТИ

#lorem(40)

#pagebreak()

= ПРОТОКОЛ РОБОТИ

== Представлення записів аудиту у базі даних

Для зберігання записів аудиту створено таблицю `action_logs` з наступними полями:

- `id` — унікальний ідентифікатор запису (автоінкремент)
- `timestamp` — мітка часу виконання дії (встановлюється автоматично при вставці)
- `action` — назва дії (до 60 символів), що відповідає імені функції-обробника запиту
- `is_success` — логічне поле, що вказує на успішність виконання дії
- `reason` — текстове поле з деталями виключення (якщо дія не була успішною)

Для забезпечення цілісності журналу аудиту створено тригери, що блокують операції UPDATE та DELETE на таблиці `action_logs`. Таким чином, журнал є append-only структурою — можливий лише запис нових логів та їх читання.

== Реалізація аудиту доступу до об'єктів системи

#highlight[
  У нашій системі об'єктом є кожен веб-ресурс (endpoint) серверної частини.
  Мова йтеме про реалізацію сервісу для аудиту, а також декоратору `@audit`,
  який буде присутній над *кожною* FastAPI route функцією. Цей декоратор має
  використовувати ім'я функції у якості `action` поля запису аудиту, а також
  опрацьовувати можливі виключення, встановлюючи поле `is_success`. Додаткова
  інформація про виключення (наприклад, поле `detail` у екземпляра класу
  `HTTPException`) має зберігатися у полі `reason` запису аудиту.

  Для веб-ресурсів, що потребують автентифікованого суб'єкта, декоратор має
  діставати ідентифікатор користувача (за наявності) і записувати у поле
  `user_id`.

  Приклад використання:

  ```
  @router.get("/users/{id}")
  @authorize(AccessLevel.CONFIDENTIAL)
  @audit()
  async def read_user(
      id: Annotated[int, Path()], db: PostgresRunnerDep, subject: CurrentSubjectDep
  ) -> UserResponse:
      return auth_service.get_user_by_id(id, db=db)
  ```
]

== Відображення записів аудиту на клієнтській частині

Для отримання записів аудиту з серверної частини реалізовано GET-ендпоінт `/audit/`, доступний лише для користувачів з рівнем доступу CONFIDENTIAL. Ендпоінт приймає два обов'язкових параметри запиту: `start` та `end` — ISO-формат дати, що визначають діапазон часу для вибірки записів.

Endpoint повертає список об'єктів `ActionLog`, кожен з яких містить: часову мітку, назву дії, статус виконання та причину помилки (якщо така була).

#pagebreak()

= ВІДПОВІДІ НА КОНТРОЛЬНІ ЗАПИТАННЯ

*1. Спробуйте ідентифікувати ознаки тих чи інших порушень безпеки, спираючись
на отриманий вами журнал реєстрації. Охарактеризуйте труднощі, що виникають при
рішенні цієї задачі.*

#lorem(40)

*2. Проаналізуйте взаємодію підсистеми реєстрації з підсистемами автентифікації
та управління доступом в розробленій системі.*

#lorem(40)

*3. Оцініть рівень реєстрації в розробленій системі згідно НД ТЗІ 2.5-004- 99.
Що можна зробити, щоб його підвищити?*

Дивись #underline[
  #link(
    "https://tzi.ua/assets/files/%D0%9D%D0%94-%D0%A2%D0%97%D0%86-2.5-004-99.pdf#page=30"
  )[
    розділ 9.1. Реєстрація
  ]
]

#lorem(40)

#pagebreak()

= ВИСНОВКИ

У ході виконання лабораторної роботи було реалізовано підсистему аудиту для серверної частини HearMyPaper. Створено міграцію бази даних для таблиці `action_logs` з тригерами, що забезпечують незмінність записів (append-only). Реалізовано модуль аудиту з репозиторієм, сервісом та роутером для керування записами. Розроблено декоратор `@audit()`, який автоматично логує всі запити до серверу, фіксуючи їх статус та деталі помилок. Декоратор застосовано до всіх ендпоінтів системи (auth, project, audit). Створено GET-ендпоінт для отримання записів аудиту в заданому діапазоні часу з рівнем доступу CONFIDENTIAL.
