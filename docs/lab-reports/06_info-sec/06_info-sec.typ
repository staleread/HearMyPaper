#set page(
  paper: "a4",
  margin: (
    top: 20mm,
    bottom: 20mm,
    left: 25mm,
    right: 15mm,
  ),
)

#set par(
  first-line-indent: (
    amount: 1.25cm,
    all: true,
  ),
  justify: true,
  leading: 1.5em,
)

#let fontSize = 14pt;

#set text(
  font: "Times New Roman",
  size: fontSize,
)

#set figure(
  supplement: [Рисунок],
  numbering: _ => {
    let headingCnt = str(counter(heading).get().at(0));
    let figureCnt = str(counter(figure).get().at(0));

    headingCnt + "." + figureCnt
  }
)

#set figure.caption(
  separator: [ -- ],
)

#set heading(numbering: (..nums) => {
   let numbers = nums.pos()

   if numbers.len() == 2 {
      numbering("1.1.", ..numbers)
   }
})

#show heading.where(level: 1): it => {
  // reset figure timer inside top-level heading body
  counter(figure).update(0)

  align(center)[
    #set text(size: fontSize)
    #block(
      above: 3.5em,
      below: 2.5em,
      it,
    )
  ]
}

#show heading.where(level: 2): it => {
  set text(size: fontSize);

  block(
    above: 3.5em,
    below: 2.5em,
    it,
  )
}

#show outline: it => {
  show heading: set align(center)
  it
}

#align(center)[
  #set par(leading: 1em)
  *Міністерство освіти і науки України* \
  *Чернівецький національний університет імені Юрія Федьковича* \
  \
  Інститут фізико-технічних та комп’ютерних наук \
  Кафедра програмного забезпечення комп’ютерних систем
]

#align(center + horizon)[
  #upper[ *Звіт* ] \

  #set par(leading: 1em)
  про виконання лабораторної роботи №6 \
  з курсу "Безпека програм та даних" \
  \
  Тема: Аутентифікація користувачів на основі токенів безпеки \
  \
  Виконали: Неголюк О.О., Ратушняк М.А. \
  Перевірив: Остапов С.Е. \
]

#align(center + bottom)[
  Чернівці -- 2025
]
#pagebreak()

#set par(
  leading: 1.5em,
)

#outline(title: upper[Зміст])
#pagebreak()

= СКЛАД ІНФОРМАЦІЇ У ФАЙЛІ НА ТОКЕНІ БЕЗПЕКИ

Файл токена безпеки зберігає зашифровані дані користувача у такому форматі:

- _salt_ -- 16 байт випадкових даних, що використовуються для генерації ключа;
- _iv_ -- 12 байт вектора ініціалізації для режиму AES-GCM;
- _ciphertext_ -- зашифровані дані у вигляді рядка: `user_id,private_key`;
- _tag_ -- 16 байт тегу автентичності, що забезпечує цілісність даних.

Таким чином структура файлу є:

$ "salt" + "iv" + "ciphertext" + "tag" $

= ОБГОВОРЕННЯ СТІЙКОСТІ ЗАСТОСОВАНИХ ЗАСОБІВ ЗАХИСТУ

Для захисту даних використовується алгоритм _AES-256 у режимі GCM_.
Стійкість рішення забезпечується такими особливостями:

- ключ генерується на основі паролю користувача з використанням
  _PBKDF2-HMAC-SHA256_, 65536 ітерацій;
- _salt_ запобігає атакам зі словниками та попередньо обчисленими таблицями
  (rainbow tables);
- режим _GCM_ гарантує не лише конфіденційність, а й цілісність даних завдяки
  тегу автентичності;
- використання випадкового IV виключає повторне використання одного й того ж
  ключа для різних повідомлень.

Загалом стійкість системи залежить від складності пароля користувача. При
використанні слабких паролів можливі атаки перебором.

= ПРОТОКОЛ РОБОТИ АУТЕНТИФІКАЦІЇ

== Вдала аутентифікація
1. Користувач вводить пароль і шлях до токена.
2. Система розшифровує приватний ключ користувача.
3. Сервер надсилає випадковий виклик (challenge).
4. Клієнт підписує виклик приватним ключем.
5. Сервер перевіряє підпис за допомогою публічного ключа користувача.
6. Якщо перевірка пройшла успішно -- користувач вважається автентифікованим.

== Невдала аутентифікація
1. Якщо пароль введений неправильно -- розшифрування файлу токена завершується
   з помилкою.
2. Якщо підпис виклику не відповідає публічному ключу користувача -- сервер
   відхиляє аутентифікацію.
3. У обох випадках користувач не отримує доступу до системи.

#pagebreak()

= БЛОК-СХЕМА ТА UML-ДІАГРАМИ

У даному розділі подано графічне представлення роботи системи аутентифікації.
Для наочності використано _послідовну діаграму (sequence diagram)_, яка
демонструє етапи взаємодії користувача з сервером при автентифікації, а також
_діаграму прецедентів_ для відображення ролей і сценаріїв використання.

#figure(
  image("usecase.svg", width: 80%),
  caption: [Діаграма прецедентів системи аутентифікації]
)

#figure(
  image("sequence.svg", width: 80%),
  caption: [Sequence diagram процесу аутентифікації]
)

#pagebreak()

= ВІДПОВІДІ НА КОНТРОЛЬНІ ЗАПИТАННЯ

1. _Що таке токен безпеки?_
Це файл або пристрій, який зберігає секретні ключі користувача у
зашифрованому вигляді для автентифікації.

2. _Які алгоритми використовуються для шифрування даних?_
AES-256 у режимі GCM з ключем, отриманим через PBKDF2-HMAC-SHA256.

3. _Які можливі вразливості у системі?_
Використання слабкого пароля користувачем, а також потенційні витоки при
некоректному зберіганні токена.

4. _Чим забезпечується цілісність файлу?_
Тегом автентичності GCM, який перевіряється під час розшифрування.

= ВИСНОВКИ

У ході лабораторної роботи було реалізовано клієнтську частину системи
автентифікації з використанням токенів безпеки.  Захист даних забезпечується
сучасними криптографічними алгоритмами: PBKDF2-HMAC-SHA256 та AES-256-GCM.
Система стійка до більшості поширених атак за умови використання складних
паролів.  Розроблена архітектура може бути використана як основа для створення
безпечних клієнт-серверних застосунків.

